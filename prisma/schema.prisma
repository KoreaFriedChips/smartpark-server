datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Waitlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  use       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refLoc    String?
  refIp     String?
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  clerkId        String
  email          String?
  phoneNumber    String?
  birthday       DateTime?
  description    String?
  city           String?
  state          String?
  profilePicture String?
  activeSince    DateTime       @default(now())
  verified       Boolean        @default(false)
  pushTokens     String[]
  listings       Listing[]
  Review         Review[]
  Bid            Bid[]
  Transaction    Transaction[]
  Favorite       Favorite[]
  Confirmation   Confirmation[]
  Reservation    Reservation[]
}

model Listing {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  thumbnail      String
  images         String[]
  latitude       Float
  longitude      Float
  coordinates    GeoJSONPoint
  distance       Float         @default(0)
  address        String
  city           String
  state          String
  listingType    String
  startingPrice  Float
  buyPrice       Float
  duration       String
  relist         Boolean       @default(false)
  relistDuration String?
  description    String?
  availability   Interval[]
  active         Boolean       @default(true)
  date           DateTime
  ends           DateTime?
  bids           Int           @default(0)
  capacity       Int           @default(1)
  spotsLeft      Int           @default(1)
  tags           String[]
  amenities      String[]
  seller         User          @relation(fields: [userId], references: [id])
  userId         String        @db.ObjectId
  spotReviews    Review[]
  Bid            Bid[]
  Transaction    Transaction[]
  Favorite       Favorite[]
  Reservation    Reservation[]
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float
  review    String
  date      DateTime
  reviewer  User     @relation(fields: [userId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String   @db.ObjectId
  userId    String   @db.ObjectId
}

model Bid {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  starts    DateTime 
  ends      DateTime
  user      User     @relation(fields: [userId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id])
  userId    String   @db.ObjectId
  listingId String   @db.ObjectId
}

model Transaction {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  transactionDate DateTime       @default(now())
  amount          Float
  paymentMethod   String?
  user            User           @relation(fields: [userId], references: [id])
  listing         Listing        @relation(fields: [listingId], references: [id])
  userId          String         @db.ObjectId
  listingId       String         @db.ObjectId
  confirmation    Confirmation?
  confirmationId  String?        @unique@db.ObjectId
}

model Favorite {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  listing   Listing @relation(fields: [listingId], references: [id])
  userId    String  @db.ObjectId
  listingId String  @db.ObjectId
}

model Confirmation {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  confirmed     DateTime    @default(now())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  transactionId String      @unique@db.ObjectId
  userId        String      @db.ObjectId
}

model Reservation {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  starts      DateTime
  ends        DateTime
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.ObjectId
  listing     Listing     @relation(fields: [listingId], references: [id])
  listingId   String      @db.ObjectId
}

type Interval {
  start DateTime
  end DateTime
}

type GeoJSONPoint {
  type          String
  coordinates   Float[]
}